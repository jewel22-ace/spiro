export default "precision highp float;\n#define GLSLIFY 1\n\nfloat quadraticOut(float t) {\n  return -t * (t - 2.0);\n}\n\nuniform float uRippleProgress;\nuniform float uAlpha;\n// uniform float uRipple2Progress;\n\nvarying vec2 vUv;\n\nfloat circle(float radius, float border) {\n\tfloat dist = radius - distance(vUv, vec2(0.5));\n  return smoothstep(0.0, border, dist);\n}\n\nconst float rippleLength = 0.035;\nconst float rippleSpace = 0.1;\nconst float border = 0.02;\nconst float borderBigCircle = 0.05;\nconst float speedRipple1 = 1.0;\nconst float speedRipple2 = 1.3;\nconst float bigCircleRadius = 0.15;\nconst float maxRippleRadius = 0.4;\n\nvoid main() {\n  // this goes between 0 and 1\n  float normalizedProg = smoothstep(0.0, 10.0, mod(uRippleProgress, 10.0));\n  float progress = min(1.0, quadraticOut(normalizedProg * speedRipple1));\n  float progress2 = min(speedRipple2, quadraticOut(normalizedProg * speedRipple2));\n\n  float bigCircle = circle(bigCircleRadius, borderBigCircle);\n\n  float ripple1 = circle(maxRippleRadius * progress, border) - circle((maxRippleRadius - rippleLength) * progress, border);\n  ripple1 *= (1.0 - min(speedRipple1, normalizedProg * speedRipple1));\n  float ripple2 = circle((maxRippleRadius - rippleSpace) * progress2, border) - circle((maxRippleRadius - rippleSpace - rippleLength) * progress2, border);\n  ripple2 *= (1.0 - min(speedRipple2, normalizedProg));\n\n  float alpha = ripple1 + ripple2 + bigCircle;\n  alpha *= uAlpha;\n  gl_FragColor = vec4(vec3(0.0), alpha);\n}\n";