export default "precision highp float;\n#define GLSLIFY 1\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// #pragma glslify: pnoise2 = require(glsl-noise/periodic/2d)\n// #pragma glslify: cnoise2 = require(glsl-noise/classic/2d)\nfloat quadraticOut(float t) {\n  return -t * (t - 2.0);\n}\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float uScaleHeightPointSize;\nuniform float uPointSize;\nuniform vec2 uTextureSize;\nuniform float uTime;\nuniform float uFrequency;\nuniform float uStormProgress;\nuniform float uTransitionProgress;\nuniform sampler2D uTouch;\nuniform float uForce;\nuniform bool uProj;\nuniform float uAmplitude;\nuniform bool uAnimOut;\nuniform float uStripForce;\nuniform float uStripMin;\nuniform float uBend;\nuniform float uDirection;\nuniform float uScale;\n// uniform bool uMenuView;\nuniform float uMenuViewHoverProgress;\nuniform float uTotalPoints;\nuniform float uRdnCircleOffset;\nuniform float uPixelRatio;\nuniform float uMenuViewProgress;\nuniform float uTest;\n\nattribute vec3 position;\nattribute vec3 aInitPosition;\nattribute float aAngle;\nattribute float aRndTouchIndex;\nattribute float aStormSpeed;\nattribute float aIndex;\n\nvarying float vPointScale;\nvarying vec2 vTexCoords;\nvarying float vStormProgress;\nvarying float vAlphaTouch;\nvarying vec2 vUv;\n\nconst float POINT_SIZE_REF = 2.73; // Offset to correct texture even if Points are overlapping with each others\nconst float BIG_CIRCLE_RADIUS = 4.0;\nconst float MAX_POINT_SIZE_MENU_HOVER = 0.9;\n\n#define PI 3.1415926538\n#define HALF_PI 3.1415926538 / 2.0\n\nvoid main() {\n  // Positions\n  vec3 originPosition = position;\n  vec3 mPosition = position;\n  float pointSize = uPointSize;\n  float waveTransitionProgress = 0.0;\n\n  vUv = mPosition.xy / uTextureSize - vec2(-0.5, -0.5);\n\n  vStormProgress = min(uStormProgress * 1.0, 1.0);\n  vAlphaTouch = 1.;\n\n  // Colored big Circles for Menu View\n  // Menu XY poistion\n  float circleSpeed = uTime / 10.;\n  float offsetMoving = snoise(vec2(aIndex + uRdnCircleOffset, circleSpeed)) * 2.;\n  float radius = BIG_CIRCLE_RADIUS * offsetMoving - aIndex / uTotalPoints * BIG_CIRCLE_RADIUS * offsetMoving;\n\n  vec2 initPos = vec2(radius * sin(PI * 2. * aIndex / 360.), radius * cos(PI * 2. * aIndex / 360.));\n  vec2 positionXYMenu = initPos + ((mPosition.xy - initPos) * uMenuViewHoverProgress);\n  // Point size\n  // from 0.18 (circle) to 1 (Plane 2D) from the view Menu\n  float pointSizeMenu = pointSize * max(0.18, MAX_POINT_SIZE_MENU_HOVER - MAX_POINT_SIZE_MENU_HOVER * max(1. - uMenuViewHoverProgress * 1.0, 0.));\n\n  // end Menu View\n\n  // if (!uMenuView) {\n\n    // Default View\n    // Storm effect positions\n    float stormProgress = quadraticOut(min(uStormProgress * aStormSpeed, 1.0));\n\n    // flag effect\n    mPosition.z += sin(mPosition.x * uFrequency + uTime) * (60.0 * (1.0 - stormProgress) + uAmplitude);\n    mPosition.z += sin(mPosition.y * uFrequency + uTime) * (60.0 * (1.0 - stormProgress) + uAmplitude);\n\n    // Storm effect positions\n\n    mPosition.xy = aInitPosition.xy + ((originPosition.xy - aInitPosition.xy) * stormProgress);\n    //\n    // uTouch / Mouse cursor\n    //\n    float rndz = snoise(vec2(aRndTouchIndex, 1.0));\n\n    float touch = texture2D(uTouch, vUv).r;\n    mPosition.x += cos(aAngle) * touch * uForce * rndz * 3.;\n    mPosition.y += sin(aAngle) * touch * uForce * rndz * 3.;\n    mPosition.z += touch * uForce * rndz * 10.0;\n\n    vAlphaTouch = (1.5 - touch);\n\n    // transition on next/prev\n    // Wave / Size transition Progress\n    float coef = 2.0;\n    float uvXY = (vUv.x + vUv.y) / 2.0;\n    // We're using PI here to do a wave based on UV (0 1 1 0) where 1 is the top of the wave\n    float progressUVXY = (uvXY + uTransitionProgress * 2.0 ) * PI - PI;\n    waveTransitionProgress = min((1.0 - sin(progressUVXY)) * uStripForce + uStripMin, 1.0);\n    mPosition.z += 7.0 * -waveTransitionProgress;\n  // }\n\n  // Transition from Default to Menu View\n  mPosition.xy = mPosition.xy * (1. - uMenuViewProgress) + positionXYMenu * uMenuViewProgress;\n  pointSize = pointSize * (1. - uMenuViewProgress) + pointSizeMenu * uMenuViewProgress;\n\n  // ModelView Position\n  vec4 mvPosition = modelViewMatrix * vec4(mPosition, 1.0);\n\n  // Bend\n  float bendForce = (sin(uTime / 2.0) + 1.0 / 2.0 ) * 0.5 * 0.4 + 0.3;\n  mvPosition.x += sin(vUv.y * PI * uDirection) * 5.0 * bendForce * uBend;\n\n  // Final Position\n  gl_Position = vec4(projectionMatrix * mvPosition);\n\n  // Particle size\n  // Size Attenuation (Reusing Three.js Points Shader\n  gl_PointSize = pointSize * uScale * (uScaleHeightPointSize / -mvPosition.z);\n  // if (!uMenuView) {\n    gl_PointSize *= min(uStormProgress * 1.5, 1.0); // Appear progress\n    gl_PointSize *= waveTransitionProgress;\n  // }\n\n  // vPoint scale\n  vPointScale = pointSize / uTest; // multiply per ratio size\n  // vTexCoords\n  if (uProj) {\n    vTexCoords = mPosition.xy;\n  } else {\n    vTexCoords = position.xy;\n  }\n}\n";