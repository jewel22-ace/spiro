export default "precision highp float;\n#define GLSLIFY 1\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// #pragma glslify: pnoise2 = require(glsl-noise/periodic/2d)\n// #pragma glslify: cnoise2 = require(glsl-noise/classic/2d)\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uPointMultiplier;\nuniform float uTime;\nuniform float uProgress;\nuniform float uNbPoints;\nuniform float uAlphaOffset;\nuniform float uPixelRatio;\nuniform float uMenuViewProgress;\nuniform float uScaleHeightPointSize;\n\nattribute vec3 position;\nattribute float size;\nattribute float index;\n\nvarying float vSizeProgress;\nvarying float vAlpha;\n\nconst float offsetNextIndex = 4.0;\n// const float pointMultiplier = 550.0;\n#define PI 3.1415926538\n\nvoid main() {\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\tvec4 finalPosition = projectionMatrix * mvPosition;\n\n\t// Add noise displacement in vertex pos\n\t// float random = snoise2(vec2(sin(PI * 8. * index / uNbPoints) * 20., uTime));\n\t// finalPosition.y = finalPosition.y + random / 3.0;\n\t// finalPosition.x = finalPosition.x + random / 3.0;\n\t// finalPosition.z = finalPosition.z + random;\n  gl_Position = vec4(finalPosition);\n\n\t// PointSize progression\n\tvSizeProgress = smoothstep(0.0, 1.0, (uProgress * uNbPoints - index) / offsetNextIndex);\n\t// Add noise displacement in PointSize\n\tfloat randomSize = max((snoise(vec2(index / 20.0, uAlphaOffset)) + 1.0) / 2.0, 0.5);\n\t// based on uMenuViewProgress\n\t// uMenuViewProgress = 0 then --> finalRandom = randomSize\n\t// uMenuViewProgress = 1 then --> finalRandom = 1\n\tfloat finalRandomSize = (1. + randomSize * (1. - uMenuViewProgress)) - 1. * (1. - uMenuViewProgress);\n\n\tfloat pointMultiplier = 75.0 + 175. * uMenuViewProgress; // 50.\n\n\t// alpha\n\tvAlpha = 0.4 + (1.0 + sin(uAlphaOffset + index / 5.0 - uTime * 8.0)) / 2.0;\n\n\tgl_PointSize = vSizeProgress * size * pointMultiplier * (uScaleHeightPointSize / -mvPosition.z) * finalRandomSize;\n\n}\n";